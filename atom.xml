<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小明网</title>
  
  <subtitle>我的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.jiege123.art/"/>
  <updated>2019-11-16T03:50:23.018Z</updated>
  <id>http://blog.jiege123.art/</id>
  
  <author>
    <name>小明</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端面试题</title>
    <link href="http://blog.jiege123.art/2019/11/16/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://blog.jiege123.art/2019/11/16/前端面试题/</id>
    <published>2019-11-16T03:33:45.000Z</published>
    <updated>2019-11-16T03:50:23.018Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Nov 16 2019 11:50:38 GMT+0800 (GMT+08:00) --><p>本文转自：<a href="https://juejin.im/post/5dcbb828f265da4cf85d84b4" target="_blank" rel="noopener">https://juejin.im/post/5dcbb828f265da4cf85d84b4</a></p><div data-v-4cdf82d6 data-id="5dccaa27e51d4510894ce8b2" itemprop="articleBody" class="article-content"><h1 class="heading" data-id="heading-0"><p><strong>第1题 谈谈变量提升？</strong></p><details open><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-2" target="_blank" rel>参考解析</a></p></details><p><strong>第2题 说说bind、call、apply的 区别？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-3" target="_blank" rel>参考解析</a></p></details><p><strong>第3题 如何实现一个 bind 函数？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-4" target="_blank" rel>参考解析</a></p></details><p><strong>第4题 请实现一个 call 函数</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-5" target="_blank" rel>参考解析</a></p></details><p><strong>第5题 如何实现一个 apply 函数？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-6" target="_blank" rel>参考解析</a></p></details><p><strong>第6题 简单说下原型链？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-7" target="_blank" rel>参考解析</a></p></details><p><strong>第7题 怎么判断对象类型？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-8" target="_blank" rel>参考解析</a></p></details><p><strong>第8题 说说箭头函数的特点</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-9" target="_blank" rel>参考解析</a></p></details><p><strong>第9题 如何确定This指向</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-10" target="_blank" rel>参考解析</a></p></details><p><strong>第10题 async、await 的优缺点</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-11" target="_blank" rel>参考解析</a></p></details><p><strong>第11题 generator 原理</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-12" target="_blank" rel>参考解析</a></p></details><p><strong>第12题 对Promise的理解</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-13" target="_blank" rel>参考解析</a></p></details><p><strong>第13题 == 和 ===区别，什么情况用 ==</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-15" target="_blank" rel>参考解析</a></p></details><p><strong>第14题 垃圾回收 新生代算法，老生代算法</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-16" target="_blank" rel>参考解析</a></p></details><p><strong>第15题 说说你对闭包的理解</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-19" target="_blank" rel>参考解析</a></p></details><p><strong>第16题 基本数据类型和引⽤类型在存储上的差别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-20" target="_blank" rel>参考解析</a></p></details><p><strong>第17题 浏览器 Eventloop 和 Node 中的有什么区别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-21" target="_blank" rel>参考解析</a></p></details><p><strong>第18题 怎样理解setTimeout 执行误差</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-23" target="_blank" rel>参考解析</a></p></details><p><strong>第19题 说说函数节流和防抖</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://zhuanlan.zhihu.com/p/38313717" target="_blank" rel="nofollow noopener noreferrer">参考解析</a></p></details><p><strong>第20题 数组降维</strong></p><details><summary><b>参考解析</b></summary><p><a href="http://foreverz.cn/2016/11/01/JavaScript之数组降维/" target="_blank" rel="nofollow noopener noreferrer">参考解析</a></p></details><p><strong>第21题 请实现一个深拷贝</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/148 https://juejin.im/post/5ba34e54e51d450e5162789b#heading-26 https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1" target="_blank" rel="nofollow noopener noreferrer">参考解析</a></p></details><p><strong>第22题 typeof 于 instanceof 区别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-27" target="_blank" rel>参考解析</a></p></details><p><strong>第23题 cookie和localSrorage、session、indexDB 的区别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-29" target="_blank" rel>参考解析</a></p></details><p><strong>第24题 怎么判断页面是否加载完成？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-30" target="_blank" rel>参考解析</a></p></details><p><strong>第25题 说说 jsonp 原理</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-32" target="_blank" rel>参考解析</a></p></details><p><strong>第26题 说说你对Service worker的理解</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-37" target="_blank" rel>参考解析</a></p></details><p><strong>第27题 说说浏览器缓存机制</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-38" target="_blank" rel>参考解析</a></p></details><p><strong>第28题 怎样选择合适的缓存策略</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-43" target="_blank" rel>参考解析</a></p></details><p><strong>第29题 说说重绘（Repaint）和回流（Reflow）</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-45" target="_blank" rel>参考解析</a></p></details><p><strong>第30题 如何优化图片</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-47" target="_blank" rel>参考解析</a></p></details><p><strong>第31题 页面首屏渲染性能优化方案有哪些</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-44" target="_blank" rel>参考解析</a></p></details><p><strong>第32题 浏览器性能问题-使用 Webpack 优化项目</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-52" target="_blank" rel>参考解析</a></p></details><p><strong>第33题 Babel 原理</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-55" target="_blank" rel>参考解析</a></p></details><p><strong>第34题 介绍下React 生命周期</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-58" target="_blank" rel>参考解析</a></p></details><p><strong>第35题 react setState 机制</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-60" target="_blank" rel>参考解析</a></p></details><p><strong>第36题 Vue的 nextTick 原理</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-61" target="_blank" rel>参考解析</a></p></details><p><strong>第37题 Vue 生命周期</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-62" target="_blank" rel>参考解析</a></p></details><p><strong>第38题 Vue 双向绑定</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-63" target="_blank" rel>参考解析</a></p></details><p><strong>第39题 v-model原理</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-64" target="_blank" rel>参考解析</a></p></details><p><strong>第40题 watch 和 computed 的区别和运用的场景</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-65" target="_blank" rel>参考解析</a></p></details><p><strong>第41题 Vue 的父子通信</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-66" target="_blank" rel>参考解析</a></p></details><p><strong>第42题 简述路由原理</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-67" target="_blank" rel>参考解析</a></p></details><p><strong>第43题 MVVM-脏数据检测</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-69" target="_blank" rel>参考解析</a></p></details><p><strong>第44题 MVVM-数据劫持</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-70" target="_blank" rel>参考解析</a></p></details><p><strong>第45题 React V16 生命周期函数用法</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-59" target="_blank" rel>参考解析</a></p></details><p><strong>第46题 Vue 和 React 区别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-74" target="_blank" rel>参考解析</a></p></details><p><strong>第47题 介绍下虚拟 DOM，对虚拟 DOM 的理解</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5b10dd36e51d4506e04cf802 https://juejin.im/post/5d3f3bf36fb9a06af824b3e2" target="_blank" rel>参考解析</a></p></details><p><strong>第48题 路由鉴权</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d6352116fb9a06ae8361932 https://juejin.im/post/5caeb3756fb9a068967791b3" target="_blank" rel>参考解析</a></p></details><p><strong>第49题 TCP 3次握手</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-76" target="_blank" rel>参考解析</a></p></details><p><strong>第50题 TCP 拥塞控制</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-77" target="_blank" rel>参考解析</a></p></details><p><strong>第51题 慢开始算法</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-78" target="_blank" rel>参考解析</a></p></details><p><strong>第52题 拥塞避免算法</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-79" target="_blank" rel>参考解析</a></p></details><p><strong>第53题 tcp 快速重传</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-80" target="_blank" rel>参考解析</a></p></details><p><strong>第54题 TCP New Ren 改进后的快恢复</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-81" target="_blank" rel>参考解析</a></p></details><p><strong>第55题 HTTPS 握手</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-82" target="_blank" rel>参考解析</a></p></details><p><strong>第56题 从输入 URL 到页面加载全过程</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-84" target="_blank" rel>参考解析</a></p></details><p><strong>第57题 HTTP 常用状态码 301 302 304 403</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5a276865f265da432c23b8d2" target="_blank" rel>参考解析</a></p></details><p><strong>第58题 常见排序-冒泡排序</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-88" target="_blank" rel>参考解析</a></p></details><p><strong>第59题 常见排序-插入排序</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-89" target="_blank" rel>参考解析</a></p></details><p><strong>第60题 常见排序-选择排序</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-90" target="_blank" rel>参考解析</a></p></details><p><strong>第61题 常见排序-归并排序</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-91" target="_blank" rel>参考解析</a></p></details><p><strong>第62题 常见排序-快排</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-92" target="_blank" rel>参考解析</a></p></details><p><strong>第63题 常见排序-堆排序</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-94" target="_blank" rel>参考解析</a></p></details><p><strong>第64题 常见排序-系统自带排序实现</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-95" target="_blank" rel>参考解析</a></p></details><p><strong>第65题 介绍下设计模式-工厂模式</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-99" target="_blank" rel>参考解析</a></p></details><p><strong>第66题 介绍下设计模式-单例模式</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-100" target="_blank" rel>参考解析</a></p></details><p><strong>第67题 介绍下设计模式-适配器模式</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-101" target="_blank" rel>参考解析</a></p></details><p><strong>第68题 介绍下设计模式-装饰模式</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-102" target="_blank" rel>参考解析</a></p></details><p><strong>第69题 介绍下设计模式-代理模式</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-103" target="_blank" rel>参考解析</a></p></details><p><strong>第70题 介绍下设计模式-发布-订阅模式</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-104" target="_blank" rel>参考解析</a></p></details><p><strong>第71题 Vue 响应式原理</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5b5eb69a5188251af86bfe00" target="_blank" rel>参考解析</a></p></details><p><strong>第72题 实现一个new操作符</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5c9c3989e51d454e3a3902b6#heading-0" target="_blank" rel>参考解析</a></p></details><p><strong>第73题 实现一个JSON.stringify</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-1" target="_blank" rel>参考解析</a></p></details><p><strong>第74题 实现一个JSON.parse</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ba34e54e51d450e5162789b#heading-2" target="_blank" rel>参考解析</a></p></details><p><strong>第75题 手写一个继承</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5c9c3989e51d454e3a3902b6#heading-11" target="_blank" rel>参考解析</a></p></details><p><strong>第76题 实现一个JS函数柯里化</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5c9c3989e51d454e3a3902b6#heading-12" target="_blank" rel>参考解析</a></p></details><p><strong>第77题 请手写一个Promise(中高级必考)</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5c9c3989e51d454e3a3902b6#heading-15" target="_blank" rel>参考解析</a></p></details><p><strong>第78题 手写防抖(Debouncing)和节流(Throttling)</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5c9c3989e51d454e3a3902b6#heading-19" target="_blank" rel>参考解析</a></p></details><p><strong>第79题 实现一个instanceOf</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5c9c3989e51d454e3a3902b6#heading-26" target="_blank" rel>参考解析</a></p></details><p><strong>第80题 实现一个私有变量</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ceaaaf0e51d45508c2fb7c0#heading-1" target="_blank" rel>参考解析</a></p></details><p><strong>第81题 使用setTimeout代替setInterval进行间歇调用</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ceaaaf0e51d45508c2fb7c0#heading-0" target="_blank" rel>参考解析</a></p></details><p><strong>第82题 数组中的forEach和map的区别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ceaaaf0e51d45508c2fb7c0#heading-2" target="_blank" rel>参考解析</a></p></details><p><strong>第83题 for in和for of的区别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ceaaaf0e51d45508c2fb7c0#heading-3" target="_blank" rel>参考解析</a></p></details><p><strong>第84题 写一个发布订阅 EventEmitter方法</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ceaaaf0e51d45508c2fb7c0#heading-4" target="_blank" rel>参考解析</a></p></details><p><strong>第85题 let、var、const区别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ceaaaf0e51d45508c2fb7c0#heading-5" target="_blank" rel>参考解析</a></p></details><p><strong>第86题 typeof和instanceof 区别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ceaaaf0e51d45508c2fb7c0#heading-7" target="_blank" rel>参考解析</a></p></details><p><strong>第87题 常见的继承的几种方法</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ceaaaf0e51d45508c2fb7c0#heading-8" target="_blank" rel>参考解析</a></p></details><p><strong>第88题 常见的浏览器内核有哪些?</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d89798d6fb9a06b102769b1#heading-1" target="_blank" rel>参考解析</a></p></details><p><strong>第89题 浏览器的主要组成部分是什么？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d89798d6fb9a06b102769b1#heading-2" target="_blank" rel>参考解析</a></p></details><p><strong>第90题 浏览器是如何渲染UI的？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d89798d6fb9a06b102769b1#heading-3" target="_blank" rel>参考解析</a></p></details><p><strong>第91题 浏览器如何解析css选择器？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d89798d6fb9a06b102769b1#heading-4" target="_blank" rel>参考解析</a></p></details><p><strong>第92题 DOM Tree是如何构建的？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d89798d6fb9a06b102769b1#heading-5" target="_blank" rel>参考解析</a></p></details><p><strong>第93题 重绘与重排的区别？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d89798d6fb9a06b102769b1#heading-6" target="_blank" rel>参考解析</a></p></details><p><strong>第94题 如何触发重排和重绘？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d89798d6fb9a06b102769b1#heading-7" target="_blank" rel>参考解析</a></p></details><p><strong>第95题 如何避免重绘或者重排？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d89798d6fb9a06b102769b1#heading-8" target="_blank" rel>参考解析</a></p></details><p><strong>第96题 前端如何实现即时通讯？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d89798d6fb9a06b102769b1#heading-12" target="_blank" rel>参考解析</a></p></details><p><strong>第97题 什么是浏览器同源策略？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d89798d6fb9a06b102769b1#heading-19" target="_blank" rel>参考解析</a></p></details><p><strong>第98题 怎样解决跨域问题？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d89798d6fb9a06b102769b1#heading-20 https://juejin.im/post/5ba34e54e51d450e5162789b#heading-31" target="_blank" rel>参考解析</a></p></details><p><strong>第99题 时间格式化</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5d7659c76fb9a06b307068ed#heading-1" target="_blank" rel>参考解析</a></p></details><p><strong>第100题 说说对html 语义化的理解</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5b94d8965188255c5a0cdc02#heading-3" target="_blank" rel>参考解析</a></p></details><p><strong>第101题 说说常用的 meta 标签</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5b94d8965188255c5a0cdc02#heading-4" target="_blank" rel>参考解析</a></p></details><p><strong>第102题 说说两种盒模型以及区别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5b94d8965188255c5a0cdc02#heading-8" target="_blank" rel>参考解析</a></p></details><p><strong>第103题 css reset 和 normalize.css 有什么区别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5b94d8965188255c5a0cdc02#heading-9" target="_blank" rel>参考解析</a></p></details><p><strong>第104题 怎样让元素水平垂直居中</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5b94d8965188255c5a0cdc02#heading-9" target="_blank" rel>参考解析</a></p></details><p><strong>第105题 说说选择器的权重计算方式</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5b94d8965188255c5a0cdc02#heading-11" target="_blank" rel>参考解析</a></p></details><p><strong>第106题 清除浮动的方法</strong></p><details><summary><b>参考解析</b></summary><p><a href="0" target="_blank" rel="nofollow noopener noreferrer">参考解析</a></p></details><p><strong>第107题 说说你对 BFC 的理解</strong></p><details><summary><b>参考解析</b></summary><p><a href="0" target="_blank" rel="nofollow noopener noreferrer">参考解析</a></p></details><p><strong>第108题 import 和 link 区别</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ab36d99f265da23866fccd1" target="_blank" rel>参考解析</a></p></details><p><strong>第109题 说下 [1, 2, 3].map(parseInt) 结果</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://mp.weixin.qq.com/s/CT0ae6C1_pr8ELzffO0IEA" target="_blank" rel="nofollow noopener noreferrer">参考解析</a></p></details><p><strong>第110题 介绍下浏览器事件委托</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://zhuanlan.zhihu.com/p/26536815" target="_blank" rel="nofollow noopener noreferrer">参考解析</a></p></details><p><strong>第111题 10w 条记录的数组，一次性渲染到页面上，如何处理可以不冻结UI？</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5ae17a386fb9a07abc299cdd" target="_blank" rel>参考解析</a></p></details><p><strong>第112题 如何实现一个左右固定，中间自适应的三栏布局</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/599970f4518825243a78b9d5#heading-52" target="_blank" rel>参考解析</a></p></details><p><strong>第113题 如何实现一个自适应的正方形</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5da32d43e51d45781d5e4bdf#heading-10" target="_blank" rel>参考解析</a></p></details><p><strong>第114题 如何用css实现一个三角形</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5da32d43e51d45781d5e4bdf#heading-11" target="_blank" rel>参考解析</a></p></details><p><strong>第115题 介绍下 positon 属性</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/5da32d43e51d45781d5e4bdf#heading-9" target="_blank" rel>参考解析</a></p></details><p><strong>第116题 说说渐进增强和优雅降级</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://juejin.im/post/58eda95261ff4b005819faf9" target="_blank" rel>参考解析</a></p></details><p><strong>第117题 defer和async区别</strong></p><details open><summary><b>参考解析</b></summary><p><a href="https://segmentfault.com/a/1190000006778717" target="_blank" rel="nofollow noopener noreferrer">参考解析</a></p></details><p><strong>第118题 实现sleep函数</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://www.cnblogs.com/pompey/p/6644977.html https://juejin.im/post/5cc7ddaf6fb9a032106bda07" target="_blank" rel="nofollow noopener noreferrer">参考解析</a></p></details><p><strong>第119题 实现 lazyMan</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://www.jianshu.com/p/f1b7cb456d37 https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/98" target="_blank" rel="nofollow noopener noreferrer">参考解析</a></p></details><p><strong>第120题 获取元素的最终background-color</strong></p><details><summary><b>参考解析</b></summary><p><a href="https://www.jianshu.com/p/e94b5779f998" target="_blank" rel="nofollow noopener noreferrer">参考解析</a></p></details></h1></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Nov 16 2019 11:50:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文转自：&lt;a href=&quot;https://juejin.im/post/5dcbb828f265da4cf85d84b4&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.jiege123.art/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面试题 - 分享" scheme="http://blog.jiege123.art/tags/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Vuex面试题汇总</title>
    <link href="http://blog.jiege123.art/2019/11/16/Vuex%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://blog.jiege123.art/2019/11/16/Vuex面试题汇总/</id>
    <published>2019-11-16T03:23:24.000Z</published>
    <updated>2019-11-16T03:26:42.454Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --><h1 id="Vuex面试题汇总"><a href="#Vuex面试题汇总" class="headerlink" title="Vuex面试题汇总"></a>Vuex面试题汇总</h1><p>文章转载自： <a href="https://juejin.im/post/5dba91e4518825647e4ef18b" target="_blank" rel="noopener">https://juejin.im/post/5dba91e4518825647e4ef18b</a></p><div data-v-4cdf82d6 data-id="5dcb74ace51d45215c7cfef1" itemprop="articleBody" class="article-content"><h4 class="heading" data-id="heading-0">什么是Vuex？</h4><details><summary>参考答案</summary><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，而更改状态的唯一方法是提交mutation，例<code>this.$store.commit('SET_VIDEO_PAUSE', video_pause</code>，<code>SET_VIDEO_PAUSE</code>为mutation属性中定义的方法 。</p></details><h4 class="heading" data-id="heading-1">Vuex解决了什么问题？</h4><details><summary>参考答案</summary><p>解决两个问题</p><ul><li>多个组件依赖于同一状态时，对于多层嵌套的组件的传参将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。</li><li>来自不同组件的行为需要变更同一状态。以往采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</li></ul></details><h4 class="heading" data-id="heading-2">什么时候用Vuex？</h4><details><summary>参考答案</summary><p>当项目遇到以下两种场景时</p><ul><li>多个组件依赖于同一状态时。</li><li>来自不同组件的行为需要变更同一状态。</li></ul></details><h4 class="heading" data-id="heading-3">Vuex的5个核心属性是什么？</h4><details><summary>参考答案</summary>分别是 state、getter、mutation、action、module 。</details><h4 class="heading" data-id="heading-4">Vuex中状态储存在哪里，怎么改变它？</h4><details><summary>参考答案</summary>存储在state中，改变Vuex中的状态的唯一途径就是显式地提交 (commit) mutation。</details><h4 class="heading" data-id="heading-5">Vuex中状态是对象，使用时候注意什么？</h4><details><summary>参考答案</summary>因为对象是引用类型，复制后改变属性还是会影响原始数据，这样会改变state里面的状态，是不允许，所以先用深度克隆复制对象，再修改。</details><h4 class="heading" data-id="heading-6">怎么在组件中批量使用Vuex的state状态？</h4><details><summary>参考答案</summary><p>使用mapState辅助函数, 利用对象展开运算符将state混入computed对象中</p><pre><code class="hljs bash copyable" lang="bash">import {mapState} from <span class="hljs-string">'vuex'</span><span class="hljs-built_in">export</span> default{    computed:{        ...mapState([<span class="hljs-string">'price'</span>,<span class="hljs-string">'number'</span>])    }}<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-7">Vuex中要从state派生一些状态出来，且多个组件使用它，该怎么做，？</h4><details><summary>参考答案</summary>使用getter属性，相当Vue中的计算属性computed，只有原状态改变派生状态才会改变。<p>getter接收两个参数，第一个是state，第二个是getters(可以用来访问其他getter)。</p><pre><code class="hljs bash copyable" lang="bash">const store = new Vuex.Store({    state: {        price: 10,        number: 10,        discount: 0.7,    },    getters: {        total: state =&gt; {            <span class="hljs-built_in">return</span> state.price * state.number        },        discountTotal: (state, getters) =&gt; {            <span class="hljs-built_in">return</span> state.discount * getters.total        }    },});<span class="copy-code-btn">复制代码</span></code></pre><p>然后在组件中可以用计算属性computed通过<code>this.$store.getters.total</code>这样来访问这些派生转态。</p><pre><code class="hljs bash copyable" lang="bash">computed: {    <span class="hljs-function"><span class="hljs-title">total</span></span>() {        <span class="hljs-built_in">return</span> this.<span class="hljs-variable">$store</span>.getters.total    },    <span class="hljs-function"><span class="hljs-title">discountTotal</span></span>() {        <span class="hljs-built_in">return</span> this.<span class="hljs-variable">$store</span>.getters.discountTotal    }}<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-8">怎么通过getter来实现在组件内可以通过特定条件来获取state的状态？</h4><details><summary>参考答案</summary><p>通过让getter返回一个函数，来实现给getter传参。然后通过参数来进行判断从而获取state中满足要求的状态。</p><pre><code class="hljs bash copyable" lang="bash">const store = new Vuex.Store({    state: {        todos: [            { id: 1, text: <span class="hljs-string">'...'</span>, <span class="hljs-keyword">done</span>: <span class="hljs-literal">true</span> },            { id: 2, text: <span class="hljs-string">'...'</span>, <span class="hljs-keyword">done</span>: <span class="hljs-literal">false</span> }        ]    },    getters: {        getTodoById: (state) =&gt; (id) =&gt;{            <span class="hljs-built_in">return</span> state.todos.find(todo =&gt; todo.id === id)        }    },});<span class="copy-code-btn">复制代码</span></code></pre><p>然后在组件中可以用计算属性computed通过<code>this.$store.getters.getTodoById(2)</code>这样来访问这些派生转态。</p><pre><code class="hljs bash copyable" lang="bash">computed: {    <span class="hljs-function"><span class="hljs-title">getTodoById</span></span>() {        <span class="hljs-built_in">return</span> this.<span class="hljs-variable">$store</span>.getters.getTodoById    },}<span class="hljs-function"><span class="hljs-title">mounted</span></span>(){    console.log(this.getTodoById(2).done)//<span class="hljs-literal">false</span>}<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-9">怎么在组件中批量使用Vuex的getter属性</h4><details><summary>参考答案</summary><p>使用mapGetters辅助函数, 利用对象展开运算符将getter混入computed 对象中</p><pre><code class="hljs bash copyable" lang="bash">import {mapGetters} from <span class="hljs-string">'vuex'</span><span class="hljs-built_in">export</span> default{    computed:{        ...mapGetters([<span class="hljs-string">'total'</span>,<span class="hljs-string">'discountTotal'</span>])    }}<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-10">怎么在组件中批量给Vuex的getter属性取别名并使用</h4><details><summary>参考答案</summary><p>使用mapGetters辅助函数, 利用对象展开运算符将getter混入computed 对象中</p><pre><code class="hljs bash copyable" lang="bash">import {mapGetters} from <span class="hljs-string">'vuex'</span><span class="hljs-built_in">export</span> default{    computed:{        ...mapGetters(            myTotal:<span class="hljs-string">'total'</span>,            myDiscountTotal:<span class="hljs-string">'discountTotal'</span>,        )    }}<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-11">在Vuex的state中有个状态number表示货物数量，在组件怎么改变它。</h4><details><summary>参考答案</summary><p>首先要在mutations中注册一个mutation</p><pre><code class="hljs bash copyable" lang="bash">const store = new Vuex.Store({    state: {        number: 10,    },    mutations: {        SET_NUMBER(state,data){            state.number=data;        }    },});<span class="copy-code-btn">复制代码</span></code></pre><p>在组件中使用<code>this.$store.commit</code>提交mutation，改变number</p><pre><code class="hljs bash copyable" lang="bash">this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">'SET_NUMBER'</span>,10)<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-12">在Vuex中使用mutation要注意什么。</h4><details><summary>参考答案</summary>mutation 必须是同步函数</details><h4 class="heading" data-id="heading-13">在组件中多次提交同一个mutation，怎么写使用更方便。</h4><details><summary>参考答案</summary><p>使用mapMutations辅助函数,在组件中这么使用</p><pre><code class="hljs bash copyable" lang="bash">methods:{    ...mapMutations({        <span class="hljs-built_in">set</span>Number:<span class="hljs-string">'SET_NUMBER'</span>,    })}<span class="copy-code-btn">复制代码</span></code></pre><p>然后调用<code>this.setNumber(10)</code>相当调用<code>this.$store.commit('SET_NUMBER',10)</code></p></details><h4 class="heading" data-id="heading-14">Vuex中action和mutation有什么区别？</h4><details><summary>参考答案</summary><ul><li>action 提交的是 mutation，而不是直接变更状态。mutation可以直接变更状态。</li><li>action 可以包含任意异步操作。mutation只能是同步操作。</li><li>提交方式不同，action 是用<code>this.$store.dispatch('ACTION_NAME',data)</code>来提交。mutation是用<code>this.$store.commit('SET_NUMBER',10)</code>来提交。</li><li>接收参数不同，mutation第一个参数是state，而action第一个参数是context，其包含了<pre><code class="hljs bash copyable" lang="bash">{    state,      // 等同于 `store.state`，若在模块中则为局部状态    rootState,  // 等同于 `store.state`，只存在于模块中    commit,     // 等同于 `store.commit`    dispatch,   // 等同于 `store.dispatch`    getters,    // 等同于 `store.getters`    rootGetters // 等同于 `store.getters`，只存在于模块中}<span class="copy-code-btn">复制代码</span></code></pre></li></ul></details><h4 class="heading" data-id="heading-15">Vuex中action和mutation有什么相同点？</h4><details><summary>参考答案</summary><p>第二参数都可以接收外部提交时传来的参数。 <code>this.$store.dispatch('ACTION_NAME',data)</code>和<code>this.$store.commit('SET_NUMBER',10)</code></p></details><h4 class="heading" data-id="heading-16">在组件中多次提交同一个action，怎么写使用更方便。</h4><details><summary>参考答案</summary><p>使用mapActions辅助函数,在组件中这么使用</p><pre><code class="hljs bash copyable" lang="bash">methods:{    ...mapActions({        <span class="hljs-built_in">set</span>Number:<span class="hljs-string">'SET_NUMBER'</span>,    })}<span class="copy-code-btn">复制代码</span></code></pre><p>然后调用<code>this.setNumber(10)</code>相当调用<code>this.$store.dispatch('SET_NUMBER',10)</code></p></details><h4 class="heading" data-id="heading-17">Vuex中action通常是异步的，那么如何知道action什么时候结束呢？</h4><details><summary>参考答案</summary><p>在action函数中返回Promise，然后再提交时候用then处理</p><pre><code class="hljs bash copyable" lang="bash">actions:{    SET_NUMBER_A({commit},data){        <span class="hljs-built_in">return</span> new Promise((resolve,reject) =&gt;{            <span class="hljs-built_in">set</span>Timeout(() =&gt;{                commit(<span class="hljs-string">'SET_NUMBER'</span>,10)            },2000)        }        )    }}this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">'SET_NUMBER_A'</span>).then(() =&gt; {  // ...})<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-18">Vuex中有两个action，分别是actionA和actionB，其内都是异步操作，在actionB要提交actionA，需在actionA处理结束再处理其它操作，怎么实现？</h4><details><summary>参考答案</summary><p>利用ES6的<code>async</code>和<code>await</code>来实现。</p><pre><code class="hljs bash copyable" lang="bash">actions:{    async actionA({commit}){        //...    },    async actionB({dispatch}){        await dispatch (<span class="hljs-string">'actionA'</span>)//等待actionA完成        // ...     }}<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-19">有用过Vuex模块吗，为什么要使用，怎么使用。</h4><details><summary>参考答案</summary><p>有，因为使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。所以将 store 分割成模块（module）。每个模块拥有自己的 state、mutations、actions、getters，甚至是嵌套子模块，从上至下进行同样方式的分割。</p><p>在module文件新建moduleA.js和moduleB.js文件。在文件中写入</p><pre><code class="hljs bash copyable" lang="bash">const state={    //...}const getters={    //...}const mutations={    //...}const actions={    //...}<span class="hljs-built_in">export</span> default{    state,    getters,    mutations,    actions}<span class="copy-code-btn">复制代码</span></code></pre><p>然后再index.js引入模块</p><pre><code class="hljs bash copyable" lang="bash">import Vue from <span class="hljs-string">'vue'</span>;import Vuex from <span class="hljs-string">'vuex'</span>;Vue.use(Vuex);import moduleA from <span class="hljs-string">'./module/moduleA'</span>import moduleB from <span class="hljs-string">'./module/moduleB'</span>const store = new Vuex.Store({    modules:{        moduleA,        moduleB    }})<span class="hljs-built_in">export</span> default store<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-20">在模块中，getter和mutation接收的第一个参数state，是全局的还是模块的？</h4><details><summary>参考答案</summary>第一个参数state是模块的state，也就是局部的state。</details><h4 class="heading" data-id="heading-21">在模块中，getter和mutation和action中怎么访问全局的state和getter？</h4><details><summary>参考答案</summary><ul><li>在getter中可以通过第三个参数rootState访问到全局的state,可以通过第四个参数rootGetters访问到全局的getter。</li><li>在mutation中不可以访问全局的satat和getter，只能访问到局部的state。</li><li>在action中第一个参数context中的<code>context.rootState</code>访问到全局的state，<code>context.rootGetters</code>访问到全局的getter。</li></ul></details><h4 class="heading" data-id="heading-22">在组件中怎么访问Vuex模块中的getter和state,怎么提交mutation和action？</h4><details><summary>参考答案</summary><ul><li>直接通过<code>this.$store.getters</code>和<code>this.$store.state</code>来访问模块中的getter和state。</li><li>直接通过<code>this.$store.commit('mutationA',data)</code>提交模块中的mutation。</li><li>直接通过<code>this.$store.dispatch('actionA,data')</code>提交模块中的action。</li></ul></details><h4 class="heading" data-id="heading-23">用过Vuex模块的命名空间吗？为什么使用，怎么使用。</h4><details><summary>参考答案</summary><p>默认情况下，模块内部的action、mutation和getter是注册在全局命名空间，如果多个模块中action、mutation的命名是一样的，那么提交mutation、action时，将会触发所有模块中命名相同的mutation、action。</p><p>这样有太多的耦合，如果要使你的模块具有更高的封装度和复用性，你可以通过添加<code>namespaced: true</code> 的方式使其成为带命名空间的模块。</p><pre><code class="hljs bash copyable" lang="bash"><span class="hljs-built_in">export</span> default{    namespaced: <span class="hljs-literal">true</span>,    state,    getters,    mutations,    actions}<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-24">怎么在带命名空间的模块内提交全局的mutation和action？</h4><details><summary>参考答案</summary><p>将 { root: true } 作为第三参数传给 dispatch 或 commit 即可。</p><pre><code class="hljs bash copyable" lang="bash">this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">'actionA'</span>, null, { root: <span class="hljs-literal">true</span> })this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">'mutationA'</span>, null, { root: <span class="hljs-literal">true</span> })<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-25">怎么在带命名空间的模块内注册全局的action？</h4><details><summary>参考答案</summary><pre><code class="hljs bash copyable" lang="bash">actions: {    actionA: {        root: <span class="hljs-literal">true</span>,        handler (context, data) { ... }    }  }<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-26">组件中怎么提交modules中的moduleA中的mutationA？</h4><details><summary>参考答案</summary><pre><code class="hljs bash copyable" lang="bash">this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">'moduleA/mutationA'</span>,data)<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-27">怎么使用mapState，mapGetters，mapActions和mapMutations这些函数来绑定带命名空间的模块？</h4><details><summary>参考答案</summary><p>首先使用<code>createNamespacedHelpers</code>创建基于某个命名空间辅助函数</p><pre><code class="hljs bash copyable" lang="bash">import { createNamespacedHelpers } from <span class="hljs-string">'vuex'</span>;const { mapState, mapActions } = createNamespacedHelpers(<span class="hljs-string">'moduleA'</span>);<span class="hljs-built_in">export</span> default {    computed: {        // 在 `module/moduleA` 中查找        ...mapState({            a: state =&gt; state.a,            b: state =&gt; state.b        })    },    methods: {        // 在 `module/moduleA` 中查找        ...mapActions([            <span class="hljs-string">'actionA'</span>,            <span class="hljs-string">'actionB'</span>        ])    }}<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-28">Vuex插件有用过吗？怎么用简单介绍一下？</h4><details><summary>参考答案</summary><p>Vuex插件就是一个函数，它接收 store 作为唯一参数。在Vuex.Store构造器选项plugins引入。 在store/plugin.js文件中写入</p><pre><code class="hljs bash copyable" lang="bash"><span class="hljs-built_in">export</span> default <span class="hljs-keyword">function</span> createPlugin(param){    <span class="hljs-built_in">return</span> store =&gt;{        //...    }}<span class="copy-code-btn">复制代码</span></code></pre><p>然后在store/index.js文件中写入</p><pre><code class="hljs bash copyable" lang="bash">import createPlugin from <span class="hljs-string">'./plugin.js'</span>const plugin = createPlugin()const store = new Vuex.Store({  // ...  plugins: [myPlugin]})<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-29">在Vuex插件中怎么监听组件中提交mutation和action？</h4><details><summary>参考答案</summary><ul><li>用Vuex.Store的实例方法<code>subscribe</code>监听组件中提交mutation</li><li>用Vuex.Store的实例方法<code>subscribeAction</code>监听组件中提交action 在store/plugin.js文件中写入</li></ul><pre><code class="hljs bash copyable" lang="bash"><span class="hljs-built_in">export</span> default <span class="hljs-keyword">function</span> createPlugin(param) {    <span class="hljs-built_in">return</span> store =&gt; {        store.subscribe((mutation, state) =&gt; {            console.log(mutation.type)//是那个mutation            console.log(mutation.payload)            console.log(state)        })        // store.subscribeAction((action, state) =&gt; {        //     console.log(action.type)//是那个action        //     console.log(action.payload)//提交action的参数        // })        store.subscribeAction({            before: (action, state) =&gt; {//提交action之前                console.log(`before action <span class="hljs-variable">${action.type}</span>`)            },            after: (action, state) =&gt; {//提交action之后                console.log(`after action <span class="hljs-variable">${action.type}</span>`)            }        })    }}<span class="copy-code-btn">复制代码</span></code></pre><p>然后在store/index.js文件中写入</p><pre><code class="hljs bash copyable" lang="bash">import createPlugin from <span class="hljs-string">'./plugin.js'</span>const plugin = createPlugin()const store = new Vuex.Store({  // ...  plugins: [myPlugin]})<span class="copy-code-btn">复制代码</span></code></pre></details><h4 class="heading" data-id="heading-30">在v-model上怎么用Vuex中state的值？</h4><details><summary>参考答案</summary><p>需要通过computed计算属性来转换。</p><pre><code class="hljs bash copyable" lang="bash">&lt;input v-model=<span class="hljs-string">"message"</span>&gt;// ...computed: {    message: {        <span class="hljs-function"><span class="hljs-title">get</span></span> () {            <span class="hljs-built_in">return</span> this.<span class="hljs-variable">$store</span>.state.message        },        <span class="hljs-built_in">set</span> (value) {            this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">'updateMessage'</span>, value)        }    }}<span class="copy-code-btn">复制代码</span></code></pre></details></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Vuex面试题汇总&quot;&gt;&lt;a href=&quot;#Vuex面试题汇总&quot; class=&quot;headerlink&quot; title=&quot;Vuex面试题汇总
      
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.jiege123.art/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue - Vuex" scheme="http://blog.jiege123.art/tags/Vue-Vuex/"/>
    
  </entry>
  
  <entry>
    <title>延迟脚本与异步脚本</title>
    <link href="http://blog.jiege123.art/2019/11/15/%E5%BB%B6%E8%BF%9F%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%BC%82%E6%AD%A5%E8%84%9A%E6%9C%AC/"/>
    <id>http://blog.jiege123.art/2019/11/15/延迟脚本与异步脚本/</id>
    <published>2019-11-15T03:40:40.000Z</published>
    <updated>2019-11-16T03:14:05.267Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --><h1 id="延迟脚本"><a href="#延迟脚本" class="headerlink" title="延迟脚本"></a>延迟脚本</h1><p><code>HTML4.01为&lt;script&gt;标签定义了defer属性</code></p><ul><li>作用：这个属性的用途是表明脚 本在执行时不会影响页面的构造</li><li>运行时间：脚本会被延迟到整个页面都解析完毕后再运行，因此，在<code>&lt;script&gt;</code>元素中设置<code>defer</code>属性，相当于告诉浏览器会立即下载，但会延迟执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;example1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;example2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在这个例子中，虽然我们把<code>&lt;script&gt;</code>元素放在了文档的<code>&lt;head&gt;</code>元素中，但其中包含的脚本将延迟到浏览器遇到<code>&lt;/html&gt;</code>标签后再执行</p><ul><li><p>注意：最好之包含一个延迟脚本，因为两个延迟脚本在现实中并不一定会安装顺序执行，也不一定会在<code>DOMContentLoaded</code>时间触发前执行</p><p>支持延迟的脚本的浏览器：IE Firefox Safari Chrome</p><hr><h1 id="异步脚本"><a href="#异步脚本" class="headerlink" title="异步脚本"></a>异步脚本</h1></li></ul><ul><li><p><code>HTML5为&lt;script&gt;元素定义了async属性。</code></p></li><li><p><code>saync</code>属性与``defer`属性的相同点：都只适用于外部脚本文件，并告诉浏览器立即下载文件。</p></li><li><p>不同点：标记为<code>async</code>的脚本并不保证按照指定他们的先后顺序执行。</p><p>列如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; async src=&quot;example1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; async src=&quot;example2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>注意：以上代码中，第二个脚本可能会在第一个脚本文件之前执行。</p><p>因此，二者之间最好互不依赖</p><p>指定<code>async</code>属性的目的是不让页面等待两个脚本下载执行，从而异步加载页面其他内容。</p><p>为此，建议异步脚本不要在加载期间修改DOM</p></li><li><p>异步脚本一定会在页面load事件前执行，但可能会在<code>DOMContentLoaded</code>事件触发之前或者之后执行。</p><p>支持异步的脚本的浏览器： Firefox Safari Chrome</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 XHTML 文档中，要把`async` 属性设置为 `async=&quot;async&quot;`</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;延迟脚本&quot;&gt;&lt;a href=&quot;#延迟脚本&quot; class=&quot;headerlink&quot; title=&quot;延迟脚本&quot;&gt;&lt;/a&gt;延迟脚本&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.jiege123.art/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js - 原生JS" scheme="http://blog.jiege123.art/tags/js-%E5%8E%9F%E7%94%9FJS/"/>
    
  </entry>
  
  <entry>
    <title>程序员实用工具网站</title>
    <link href="http://blog.jiege123.art/2019/11/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/"/>
    <id>http://blog.jiege123.art/2019/11/12/程序员实用工具网站/</id>
    <published>2019-11-12T03:53:32.000Z</published>
    <updated>2019-11-16T03:01:07.297Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --><p>转载自： <a href="https://blog.csdn.net/m0_38106923/article/details/100130354" target="_blank" rel="noopener">https://blog.csdn.net/m0_38106923/article/details/100130354</a></p><div class="htmledit_views" id="content_views"><h1 id="main-toc"><a name="t0"></a><strong>目录</strong></h1><p id="1%E3%80%81%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-toc" style="margin-left:0"><a href="#1%E3%80%81%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E" rel="nofollow" data-token="123d44a3d28accd7dcf80810b9256338" target="_self">1、搜索引擎</a></p><p id="2%E3%80%81PPT-toc" style="margin-left:0"><a href="#2%E3%80%81PPT" rel="nofollow" data-token="cecd46360e8c395e699117f6e3593dee" target="_self">2、PPT</a></p><p id="3%E3%80%81%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C-toc" style="margin-left:0"><a href="#3%E3%80%81%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C" rel="nofollow" data-token="8d1ae155d1d35583b07122569bda49c2" target="_self">3、图片操作</a></p><p id="4%E3%80%81%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB-toc" style="margin-left:0"><a href="#4%E3%80%81%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB" rel="nofollow" data-token="fd375cea8501d5da8e9260d315f8d681" target="_self">4、文件共享</a></p><p id="5%E3%80%81%E5%BA%94%E5%B1%8A%E7%94%9F%E6%8B%9B%E8%81%98-toc" style="margin-left:0"><a href="#5%E3%80%81%E5%BA%94%E5%B1%8A%E7%94%9F%E6%8B%9B%E8%81%98" rel="nofollow" data-token="2a3e197811b9d85a71a1ae0788dd8d1c" target="_self">5、应届生招聘</a></p><p id="6%E3%80%81%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93-toc" style="margin-left:0"><a href="#6%E3%80%81%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93" rel="nofollow" data-token="08426b0271b05c5a11fd192697612401" target="_self">6、程序员面试题库</a></p><p id="7%E3%80%81%E5%8A%9E%E5%85%AC%E3%80%81%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6-toc" style="margin-left:0"><a href="#7%E3%80%81%E5%8A%9E%E5%85%AC%E3%80%81%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6" rel="nofollow" data-token="17790f05034573a7a6f65c2ff7acf6eb" target="_self">7、办公、开发软件</a></p><p id="8%E3%80%81%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%87%E3%80%81%E8%A7%86%E9%A2%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99%C2%A0-toc" style="margin-left:0"><a href="#8%E3%80%81%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%87%E3%80%81%E8%A7%86%E9%A2%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99%C2%A0" rel="nofollow" data-token="5c1a85f67eaf10c80341279b0ee2dce3" target="_self">8、高清图片、视频素材网站&nbsp;</a></p><p id="9%E3%80%81%E9%A1%B9%E7%9B%AE%E5%BC%80%E6%BA%90-toc" style="margin-left:0"><a href="#9%E3%80%81%E9%A1%B9%E7%9B%AE%E5%BC%80%E6%BA%90" rel="nofollow" data-token="dcfbe8bb54975bdbf0d600972a74edc0" target="_self">9、项目开源</a></p><p id="10%E3%80%81%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E5%AE%9D%E5%85%B8%E5%A4%A7%E5%85%A8-toc" style="margin-left:0"><a href="#10%E3%80%81%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E5%AE%9D%E5%85%B8%E5%A4%A7%E5%85%A8" rel="nofollow" data-token="75c64279ebaa772468f75a9b9794efa2" target="_self">10、在线工具宝典大全</a></p><hr id="hr-toc"><p style="text-indent:33px">程序员开发需要具备良好的信息检索能力，为了备忘（收藏夹真是满了），将开发过程中常用的网站进行整理。</p><h1 id="1%E3%80%81%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E"><a name="t1"></a>1、搜索引擎</h1><h2 id="1.1%E3%80%81%E7%A7%98%E8%BF%B9%E6%90%9C%E7%B4%A2"><a name="t2"></a><strong>1.1、秘迹搜索</strong></h2><p style="text-indent:33px">一款无敌有良心、无敌安全的搜索引擎，不会收集私人信息，保护私隐，没有Cookie，并且秘迹搜索聚合了百度、360、Bing、搜狗等搜索结果。</p><p style="text-align:center"><img alt class="has" height="196" src="https://img-blog.csdnimg.cn/20190829095508389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTA2OTIz,size_16,color_FFFFFF,t_70" width="600"></p><p style="text-indent:33px">网站：<a href="https://mijisou.com" rel="noopener" data-token="ec966c202b65efb2a2de9a77d2e28c40" target="_blank">https://mijisou.com</a></p><h2 id="1.2%E3%80%81%E5%B0%8F%E7%99%BD%E7%9B%98"><a name="t3"></a><strong>1.2、小白盘</strong></h2><p style="text-indent:33px">度盘资源搜索的网站，能够搜索电影、电视剧、小说、音乐等资源（<strong>注意：评论区很多小伙伴说小白盘有毒，我用谷歌浏览器搜索过几次并无大碍，请慎用！</strong>）</p><p style="text-align:center"><img alt class="has" height="397" src="https://img-blog.csdnimg.cn/20190829095422704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTA2OTIz,size_16,color_FFFFFF,t_70" width="600"></p><p style="text-indent:33px">网站：<a href="https://www.xiaobaipan.com" rel="noopener" data-token="32a5c87612da8cce99422c1088011aeb" target="_blank">https://www.xiaobaipan.com</a></p><h2><a name="t4"></a><strong>1.3、</strong>&nbsp;<strong>DogeDoge搜索</strong></h2><p style="text-indent:33px">DogeDoge搜索，中文名多吉搜索，一个绝赞的民间高手开发的搜索引擎，传说完全可以替代百度搜索<strong>，</strong>百度首页几乎都是广告，而 DogeDoge搜索一个广告都没有，搜索答案侧重于知乎、博客园、CSDN等，实在良心，搜索结果和谷歌差不多，非常适合那些无法科学上网的朋友。</p><p style="text-align:center"><img alt class="has" height="344" src="https://img-blog.csdnimg.cn/20191011132627231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="1000"></p><p style="text-indent:33px">网站：<a href="https://www.dogedoge.com/" rel="noopener" data-token="0ca0755c95ac935a2c178e41b6ba5261" target="_blank">https://www.dogedoge.com/</a></p><h2 style="text-indent:0"><a name="t5"></a><strong>1.4、</strong>GitLogs</h2><p style="text-indent:33px">GitLogs 是GitHub网站的内容搜索引擎，可以帮助工程师们快速的找到相关的项目，同时也提供最新的开发项目、开发新闻、相关主题推荐等资源，支持邮箱订阅文章，每天都可以收到GitHub网站上的最新内容。</p><p style="text-align:center"><img alt class="has" height="334" src="https://img-blog.csdnimg.cn/20191027201616537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="700"></p><p style="text-indent:33px">网站：<a href="https://www.gitlogs.com/" rel="noopener" data-token="8f83336ff383d8b6b8d2466429ebde41" target="_blank">https://www.gitlogs.com/</a>&nbsp;</p><h1 id="2%E3%80%81PPT"><a name="t6"></a>2、PPT</h1><h2 id="2.1%E3%80%81%E4%BC%98%E5%93%81PPT"><a name="t7"></a><strong>2.1、优品PPT</strong></h2><p style="text-indent:33px">高品质免费PPT模板下载网站，比第一PPT质量高很多。</p><p style="text-align:center"><img alt class="has" height="339" src="https://img-blog.csdnimg.cn/20190829095329397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTA2OTIz,size_16,color_FFFFFF,t_70" width="600"></p><p style="text-indent:33px">网站：<a href="http://www.ypppt.com" rel="noopener" data-token="dc9dd9dccd5c68814a44e749b18da6b8" target="_blank">http://www.ypppt.com</a></p><h1 id="3%E3%80%81%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C"><a name="t8"></a>3、图片操作</h1><h2 id="3.1%E3%80%81%E5%9B%BE%E7%89%87%E6%97%A0%E9%99%90%E5%8F%98%E5%A4%A7"><a name="t9"></a><strong>3.1、图片无限变大</strong></h2><p style="text-indent:33px">让你的图片无损放大，放大，再放大！只需要稍稍处理一下就可达到意想不到的效果。</p><p style="text-align:center"><img alt class="has" height="322" src="https://img-blog.csdnimg.cn/20190829095211374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTA2OTIz,size_16,color_FFFFFF,t_70" width="600"></p><p style="text-indent:33px">网站：<a href="http://bigjpg.com/zh" rel="noopener" data-token="8d703e13460e7b7fdc648da5d508768a" target="_blank">http://bigjpg.com/zh</a></p><h2><a name="t10"></a><strong>3.2、</strong>waifu2x无损放大图片</h2><p style="text-indent:33px">waifu2x 是一位来自日本的开发者所开源的项目，该项目利用人工智能深度卷积神经网络技术来无损放大图片，堪称是一款图片放大神器。一般图片在放大后可能会出现边界锯齿、线条模糊等问题，而 waifu2x 的算法对此提供了非常好的图片拉伸、降噪、填补机制，使得放大前后的图片给人观感基本一致。</p><p style="text-align:center"><img alt class="has" height="507" src="https://img-blog.csdnimg.cn/2019100314550430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="700"></p><p style="text-indent:33px">网站：<a href="http://waifu2x.udp.jp/index.zh-CN.html" rel="noopener" data-token="98f47870e6735c2a1131c95b74b45bc9" target="_blank">http://waifu2x.udp.jp/index.zh-CN.html</a>&nbsp; &nbsp; &nbsp; &nbsp;GitHub源码：<a href="https://github.com/nagadomi/waifu2x" rel="noopener" data-token="e949642c3a5fdd72c62ae90a8c27499d" target="_blank">https://github.com/nagadomi/waifu2x</a></p><h2><a name="t11"></a><strong>3.3、</strong>Remove Image Background照片抠图和证件照换底色</h2><p style="text-indent:33px">由 byteq 开发人员 Benjamin Groessing 所开发的 remove.bg 是一款基于 Python、Ruby 和深度学习的抠图工具，它通过 AI 技术自动识别前景层，然后将之与背景层分离开来。网站目前免费开放，无论你是专业设计师还是刚入行的运营小白，都可以上传照片实现自动抠图，免去选择、标记等一系列繁琐的常规操作。真是照片抠图和证件照换底色的绝佳利器。</p><p style="text-align:center"><img alt class="has" height="365" src="https://img-blog.csdnimg.cn/20191004184717714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="700"></p><p style="text-indent:33px">网站：<a href="https://www.remove.bg/" rel="noopener" data-token="63aa32b42d1f1699ec9def5dd07a8216" target="_blank">https://www.remove.bg/</a>&nbsp; &nbsp; &nbsp;&nbsp;Python代码实现：<a href="https://handsome-man.blog.csdn.net/article/details/102025059" rel="noopener" data-token="e632d41271e7c6fd1f496a5ab7c8f199" target="_blank">https://handsome-man.blog.csdn.net/article/details/102025059</a></p><h2 style="text-indent:0"><a name="t12"></a><strong>3.4、</strong>TinyPNG</h2><p style="text-indent:33px">免费的在线图片压缩工具，压缩率高，无损画质，直接拖拽使用，独特且强悍的JavaScript 算法，能极速压缩 80% 的图片大小，而不损害其质量。</p><p style="text-align:center"><img alt class="has" height="481" src="https://img-blog.csdnimg.cn/20191027202338817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="700"></p><p style="text-indent:33px">网站：<a href="https://tinypng.com/" rel="noopener" data-token="2bf76a67459e833344228cdcde185b6a" target="_blank">https://tinypng.com/</a></p><h2><a name="t13"></a><strong>3.5、</strong>SmartResize</h2><p style="text-indent:33px">基于 JavaScript+HTML5 编写的一个批量裁剪缩放图片神器（适合简单的人工智能图像数据预处理）。</p><p style="text-align:center"><img alt class="has" height="395" src="https://img-blog.csdnimg.cn/20191027202813832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="700"></p><p style="text-indent:33px">网站：<a href="https://www.smartresize.com/zh-cn" rel="noopener" data-token="d56dde2efeb10e74d649660d7c18fbaf" target="_blank">https://www.smartresize.com/zh-cn</a>&nbsp;</p><h1 id="4%E3%80%81%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB"><a name="t14"></a>4、文件共享</h1><h2 id="4.1%E3%80%81%E6%8B%B7%E8%B4%9D%E5%85%94"><a name="t15"></a>4.1、拷贝兔</h2><p style="text-indent:33px">拷贝兔是款跨平台文件传输工具，能做到不同设备间文件或文本的临时性迅速分享的应用，支持Windows、Mac、Linux、iOS、Android平台互传；在线使用，用完即走。比百度网盘方便多了。</p><p style="text-align:center"><img alt class="has" height="509" src="https://img-blog.csdnimg.cn/20190829095116687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTA2OTIz,size_16,color_FFFFFF,t_70" width="600"></p><p style="text-indent:33px">网站：<a href="https://cp.anyknew.com" rel="noopener" data-token="a71ebab3daf3c2ef140b9dd70366e537" target="_blank">https://cp.anyknew.com</a></p><h1 id="5%E3%80%81%E5%BA%94%E5%B1%8A%E7%94%9F%E6%8B%9B%E8%81%98"><a name="t16"></a>5、应届生招聘</h1><h2 id="5.1%E3%80%81%E5%BA%94%E5%B1%8A%E7%94%9F%E6%B1%82%E8%81%8C%E7%BD%91"><a name="t17"></a>5.1、应届生求职网</h2><p style="text-indent:33px">为大学生提供全方位的求职服务，提供最全、最新、最准确的校园宣讲、全职招聘、兼职实习、知名企业校园招聘、现场招聘会等信息，并且为大学生提供针对性的求职就业指导。</p><p style="text-align:center"><img alt class="has" height="430" src="https://img-blog.csdnimg.cn/20190829095803534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTA2OTIz,size_16,color_FFFFFF,t_70" width="600"></p><p style="text-indent:33px">网站：<a href="http://s.yingjiesheng.com/" rel="noopener" data-token="857167e6a0fe517f070e2e58cb8d11d9" target="_blank">http://s.yingjiesheng.com/</a></p><h1 id="6%E3%80%81%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93"><a name="t18"></a>6、程序员面试题库</h1><h2 id="6.1%E3%80%81LeetCode%EF%BC%88%E5%8A%9B%E6%89%A3%EF%BC%89"><a name="t19"></a>6.1、LeetCode（力扣）</h2><p style="text-indent:33px">力扣题库，提供海量技术面试资源。</p><p style="text-align:center"><img alt class="has" height="341" src="https://img-blog.csdnimg.cn/20190829100245742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTA2OTIz,size_16,color_FFFFFF,t_70" width="600"></p><p style="text-indent:33px">网站：<a href="https://leetcode-cn.com/" rel="noopener" data-token="84b4a1f4076b54363ac8ef4f79dbcaa9" target="_blank">https://leetcode-cn.com/</a></p><h1 id="7%E3%80%81%E5%8A%9E%E5%85%AC%E3%80%81%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6"><a name="t20"></a>7、办公、开发软件</h1><h2 id="7.1%E3%80%81%E6%88%91%E7%88%B1%E5%88%86%E4%BA%AB%E7%BD%91"><a name="t21"></a>7.1、我爱分享网</h2><p style="text-indent:33px">分享各种常用软件安装包（配套破解软件），安装教程和自学视频，让小伙伴即时获取最新的软件，软件无忧，理工科必备利器！</p><p style="text-align:center"><img alt class="has" height="455" src="https://img-blog.csdnimg.cn/20190906124652911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="700"></p><p style="text-indent:33px">网站：<a href="http://www.zhanshaoyi.com/rjxz.html" rel="noopener" data-token="e62e7e93e5fb5130210c377ea07824bc" target="_blank">http://www.zhanshaoyi.com/rjxz.html</a></p><h1 id="8%E3%80%81%E9%AB%98%E6%B8%85%E5%9B%BE%E7%89%87%E3%80%81%E8%A7%86%E9%A2%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99%C2%A0"><a name="t22"></a>8、高清图片、视频素材网站&nbsp;</h1><p style="text-indent:33px">整理了一份实用性爆表的表格图像、视频、矢量……共35个网站，表中含有网站简介和素材类型，做PPT必备啊~</p><p style="text-align:center"><img alt class="has" height="1200" src="https://img-blog.csdnimg.cn/20190907100742907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="1000"></p><p style="text-indent:33px">表格下载链接：链接：<a href="https://pan.baidu.com/s/1jPpbkZiqgTJTwcVKh4pd4w" rel="noopener" data-token="650a7aebeab813646bf05ffeb5e558bf" target="_blank">https://pan.baidu.com/s/1jPpbkZiqgTJTwcVKh4pd4w</a>&nbsp; 提取码：t19j&nbsp;</p><h1 id="9%E3%80%81%E9%A1%B9%E7%9B%AE%E5%BC%80%E6%BA%90"><a name="t23"></a>9、项目开源</h1><h2 id="9.1%E3%80%81GitHub"><a name="t24"></a>9.1、GitHub</h2><p style="text-indent:33px">GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。</p><p style="text-indent:33px">作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。（访问不稳定，经常需要翻墙）</p><p style="text-align:center"><img alt class="has" height="356" src="https://img-blog.csdnimg.cn/20190914145837320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="700"></p><p style="text-indent:33px">网站：<a href="https://github.com/" rel="noopener" data-token="557efaa97b4b6e4b820d679dbd1625ff" target="_blank">https://github.com/</a>&nbsp;</p><h2 id="9.2%E3%80%81%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD"><a name="t25"></a>9.2、开源中国</h2><p style="text-indent:33px">开源中国成立于2008年8月，是目前国内最大的开源技术社区，拥有超过200万会员，形成了由开源软件库、代码分享、资讯、协作翻译、码云、众包、招聘等几大模块内容，为IT开发者提供了一个发现、使用、并交流开源技术的平台。</p><p style="text-align:center"><img alt class="has" height="335" src="https://img-blog.csdnimg.cn/20190914145422207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="700"></p><p style="text-indent:33px">网站：<a href="https://www.oschina.net/" rel="noopener" data-token="28b611f932a31d88f6674c96dc118646" target="_blank">https://www.oschina.net/</a>&nbsp;</p><h2 id="9.3%E3%80%81%E7%A0%81%E4%BA%91"><a name="t26"></a>9.3、码云</h2><p style="text-indent:33px">码云是 OSCHINA.NET 推出的代码托管平台,支持 Git 和 SVN,提供免费的私有仓库托管。目前已有超过 350 万的开发者选择码云。</p><p style="text-align:center"><img alt class="has" height="347" src="https://img-blog.csdnimg.cn/20190914145726985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="700"></p><p style="text-indent:33px">网站：<a href="https://gitee.com/" rel="noopener" data-token="c552c0eb61fbc5bf383ef2cce934b1f7" target="_blank">https://gitee.com/</a>&nbsp;</p><h1 id="10%E3%80%81%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E5%AE%9D%E5%85%B8%E5%A4%A7%E5%85%A8"><a name="t27"></a>10、在线工具宝典大全</h1><h2 id="10.1%E3%80%81%E7%88%B1%E8%B5%84%E6%96%99%E5%B7%A5%E5%85%B7"><a name="t28"></a>10.1、爱资料工具</h2><p style="text-indent:33px">爱资料在线工具，为开发运维提供全面的在线工具箱，目前已开发工具270款，包含开发工具、运维工具、常用工具、SEO站长工具等，是好用，方便的在线工具网站。</p><p style="text-align:center"><img alt class="has" height="361" src="https://img-blog.csdnimg.cn/20190914221056195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="700"></p><p style="text-indent:33px">网站：<a href="https://www.toolnb.com/" rel="noopener" data-token="554f265b58597dada0be2c2bcca524f0" target="_blank">https://www.toolnb.com/</a>&nbsp;</p><h2 id="10.2%E3%80%81%E8%8F%9C%E9%B8%9F%E5%B7%A5%E5%85%B7"><a name="t29"></a>10.2、菜鸟工具</h2><p style="text-indent:33px">最大的特点是支持各种语言的在线编辑，可以在网页上运行代码。</p><p style="text-align:center"><img alt class="has" height="427" src="https://img-blog.csdnimg.cn/20190927205931850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oYW5kc29tZS1tYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" width="700"></p><p style="text-indent:33px">网站：<a href="https://c.runoob.com/" rel="noopener" data-token="6daa6578e924c080b144a574d55b28f1" target="_blank">https://c.runoob.com/</a>&nbsp;</p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;转载自： &lt;a href=&quot;https://blog.csdn.net/m0_38106923/article/details/10013035
      
    
    </summary>
    
    
      <category term="工具" scheme="http://blog.jiege123.art/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具 - 分享" scheme="http://blog.jiege123.art/tags/%E5%B7%A5%E5%85%B7-%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>个人图床搭建</title>
    <link href="http://blog.jiege123.art/2019/10/04/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.jiege123.art/2019/10/04/个人图床搭建/</id>
    <published>2019-10-04T05:23:25.000Z</published>
    <updated>2019-11-16T03:01:34.969Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --><hr><ul><li><h1 id="个人图床搭建"><a href="#个人图床搭建" class="headerlink" title="个人图床搭建"></a>个人图床搭建</h1></li></ul><p>这里我们选择<code>Chevereto</code></p><p>大家可以到官方的<a href="https://github.com/Chevereto/Chevereto-Free/tree/1.1.3" target="_blank" rel="noopener">github</a>上下载源码</p><p>官方有四种安装方式这里选择第四种</p><p><img src="http://img.jiege123.art/images/2019/10/04/xUXR.png" alt></p><p>下载压缩包，通过宝塔上传到网站根目录<code>/www/wwwroot/</code>解压</p><p>这里我们需要新建一个网站（这里推荐大家去创建一个二级域名）</p><p><strong>记得更改一下权限（不改权限的话，图床可能无法访问）</strong></p><p><img src="http://img.jiege123.art/images/2019/10/04/x3bo.png" alt></p><p>我们新建一个网站，然后把目录指定一下</p><p><strong>创建后我们需要修改一下网站的伪静态</strong></p><p><img src="http://img.jiege123.art/images/2019/10/04/xb8A.png" alt></p><p>具体源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Image not found replacement</span><br><span class="line">location ~* (jpe?g|png|gif) &#123;</span><br><span class="line">log_not_found off;</span><br><span class="line">error_page 404 /content/images/system/default/404.gif;</span><br><span class="line">&#125;</span><br><span class="line"># CORS header (avoids font rendering issues)</span><br><span class="line">location ~ \.(ttf|ttc|otf|eot|woff|woff2|font.css|css|js)$ &#123;</span><br><span class="line">add_header Access-Control-Allow-Origin &quot;*&quot;;</span><br><span class="line">&#125;</span><br><span class="line"># Pretty URLs</span><br><span class="line">location / &#123;</span><br><span class="line">try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接访问域名就可以看到界面了</p><p>然后登陆进去会有英文界面，在网站域名后面输入settings就可以把全局设置为中文了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --&gt;&lt;hr&gt;&lt;ul&gt;&lt;li&gt;&lt;h1 id=&quot;个人图床搭建&quot;&gt;&lt;a href=&quot;#个人图床搭建&quot; class=&quot;headerlink&quot; title=&quot;个人图
      
    
    </summary>
    
    
      <category term="工具" scheme="http://blog.jiege123.art/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="图床 - 分享" scheme="http://blog.jiege123.art/tags/%E5%9B%BE%E5%BA%8A-%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>个人网盘搭建</title>
    <link href="http://blog.jiege123.art/2019/10/03/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.jiege123.art/2019/10/03/个人网盘搭建/</id>
    <published>2019-10-03T12:28:20.000Z</published>
    <updated>2019-11-16T03:01:44.605Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --><hr><ul><li><h1 id="个人网盘搭建"><a href="#个人网盘搭建" class="headerlink" title="个人网盘搭建"></a>个人网盘搭建</h1></li></ul><h3 id="选择一款网盘"><a href="#选择一款网盘" class="headerlink" title="选择一款网盘"></a>选择一款网盘</h3><p><a href="https://nextcloud.com/install/#instructions-server" target="_blank" rel="noopener">nextcloud下载地址</a><br><a href="https://kodcloud.com/download/" target="_blank" rel="noopener">可道云下载地址</a><br><a href="https://cloudreve.org/download.php" target="_blank" rel="noopener">cloudreve与阿里云OSS结合</a></p><p>这里建议有阿里云主机的选择第三个</p><hr><h3 id="下载宝塔服务器运维面板"><a href="#下载宝塔服务器运维面板" class="headerlink" title="下载宝塔服务器运维面板"></a>下载宝塔服务器运维面板</h3><p><a href="https://www.bt.cn/" target="_blank" rel="noopener">宝塔官网</a>:选择对应的系统版本</p><p>提示：要想进入宝塔面板还必须在云主机防火墙上面开放<strong>8888端口</strong></p><p>在软件商店安装好相应的运行环境</p><p><img src="http://img.jiege123.art/images/2019/10/04/QQ20191004112854.jpg" alt="这里我们把这几个常用工具的都安装了"></p><p>在宝塔面板中点击文件进入<code>/www/wwwroot</code>把下载好的网盘压缩包放到这里面来解压</p><p>然后点击进入宝塔<strong>网站</strong>模块，<strong>添加站点</strong>，设置好<strong>域名</strong>，<strong>网站目录</strong>，<strong>数据库</strong>等</p><p>提示：<em>数据库可以选择MySQL</em></p><p>这里需要设置<strong>伪静态为thinkphp</strong>,有宝塔的可以直接设置</p><p>最后点击或者输入域名进入安装界面设置好<strong>管理员账号密码</strong>还有<strong>数据库用户名和密码</strong>就好了</p><hr><h3 id="设置阿里云OSS对象存储方式"><a href="#设置阿里云OSS对象存储方式" class="headerlink" title="设置阿里云OSS对象存储方式"></a>设置阿里云OSS对象存储方式</h3><p>阿里云OSS对象存储可以提升上传下载速度,坏处就是要钱</p><p><em>这里我们进入网盘的管理面板设置上传策略</em></p><p><img src="http://img.jiege123.art/images/2019/10/04/OSS.jpg" alt="阿里云OSS上传"></p><p>填好后我们还需要到OSS的基础设置里面添加跨域访问规则。</p><p><img src="http://img.jiege123.art/images/2019/10/04/n5z.png" alt></p><p>点击新建，新建如下规则：</p><p><img src="http://img.jiege123.art/images/2019/10/04/yI3.png" alt></p><p>最后设置好就OK啦</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --&gt;&lt;hr&gt;&lt;ul&gt;&lt;li&gt;&lt;h1 id=&quot;个人网盘搭建&quot;&gt;&lt;a href=&quot;#个人网盘搭建&quot; class=&quot;headerlink&quot; title=&quot;个人网
      
    
    </summary>
    
    
      <category term="工具" scheme="http://blog.jiege123.art/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="分享" scheme="http://blog.jiege123.art/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="网盘" scheme="http://blog.jiege123.art/tags/%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署到远端的GitHub上</title>
    <link href="http://blog.jiege123.art/2019/10/03/hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E8%BF%9C%E7%AB%AF%E7%9A%84GitHub%E4%B8%8A/"/>
    <id>http://blog.jiege123.art/2019/10/03/hexo部署到远端的GitHub上/</id>
    <published>2019-10-03T10:52:01.000Z</published>
    <updated>2019-11-16T03:02:04.580Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --><h1 id="将本地文件部署到远端的GitHub"><a href="#将本地文件部署到远端的GitHub" class="headerlink" title="将本地文件部署到远端的GitHub"></a>将本地文件部署到远端的GitHub</h1><ul><li><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3></li></ul><hr><p><strong>安装 git</strong>：Windows安装：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官网下载安装</a><br>如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：<code>./config</code>，<code>make</code>，<code>sudo make install</code>这几个命令安装就好了。</p><p><strong>配置全局用户名和全局邮箱：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;your Email&quot;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><p><strong>初始化本地文件</strong><br><code>git init</code></p><p>*瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。*</p><p><strong>查询文件状态</strong><br><code>git status</code></p><p><strong>生成ssh key公钥</strong>：<br><code>ssh-keygen -t rsa -C &#39;your email&#39;</code></p><p><strong>在GitHub上创建仓库然后把ssh key公钥添加进去</strong></p><p><strong>关联仓库</strong></p><p>1.到 github 仓库然后复制仓库地址</p><p>2.执行指令：<code>git remote add origin 远程仓库地址</code></p><p><strong>检查是否连接成功</strong><br><code>ssh -T git@github.com</code></p><p><strong>提交到所有文件到暂存区</strong><br><code>git add .</code></p><p><strong>提交所有文件到本地仓库</strong><br><code>git commit -m &quot;备注&quot;</code></p><p><strong>提交到主仓库后，再提交到gitHub服务器上</strong></p><p><code>git push -u origin master</code></p><p>由于新建的远程仓库是空的，所以要加上-u这个参数，等远程仓库里面有了内容之后，下次再从本地库上传内容的时候只需下面这样就可以了：</p><p><code>git push origin master</code></p><hr><p>另外，这里有个坑需要注意一下，就是在创建远程仓库的时候，如果你勾选了Initialize this repository with a README（就是创建仓库的时候自动给你创建一个README文件），那么到了第九步你将本地仓库内容推送到远程仓库的时候就会报一个failed to push some refs to <a href="https://github.com/guyibang/TEST2.git的错。" target="_blank" rel="noopener">https://github.com/guyibang/TEST2.git的错。</a></p><p>这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并一下：</p><p><code>$ git pull --rebase origin master</code></p><p>这时你再push就能成功了。</p><hr><p><strong>流程图:</strong></p><p><img src="http://img.jiege123.art/images/2019/10/03/git.png" alt="git流程图"></p><hr><p>总结**：其实只需要进行下面几步就能把本地项目上传到Github</p><p>1、在本地创建一个版本库（即文件夹），通过git init把它变成Git仓库；</p><p>2、把项目复制到这个文件夹里面，再通过git add .把项目添加到仓库；</p><p>3、再通过git commit -m “注释内容”把项目提交到仓库；</p><p>4、在Github上设置好SSH密钥后，新建一个远程仓库，通过<code>git remote add origin 你的仓库地址</code>将本地仓库和远程仓库进行关联；</p><p>5、最后通过git push -u origin master把本地仓库的项目推送到远程仓库（也就是Github）上；（若新建远程仓库的时候自动创建了README文件会报错，解决办法看上面）。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;将本地文件部署到远端的GitHub&quot;&gt;&lt;a href=&quot;#将本地文件部署到远端的GitHub&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="git" scheme="http://blog.jiege123.art/categories/git/"/>
    
    
      <category term="分享" scheme="http://blog.jiege123.art/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="git" scheme="http://blog.jiege123.art/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="http://blog.jiege123.art/2019/08/29/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://blog.jiege123.art/2019/08/29/Markdown基本语法/</id>
    <published>2019-08-29T06:03:08.000Z</published>
    <updated>2019-11-16T03:02:16.871Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul><li><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4></li></ul><p>要加粗的文字分别用两个*号包起来</p><ul><li><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><h4 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h4></li></ul><p>要倾斜的文字左右分别用一个*包起来</p><ul><li><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4></li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**这是加粗的文字**</span></span><br><span class="line"><span class="emphasis">*这是倾斜的文字*</span>`</span><br><span class="line"><span class="strong">***这是斜体加粗的文字**</span>*</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="strong">*****</span></span><br></pre></td></tr></table></figure><p>效果如下：<br>可以看到，显示效果是一样的。</p><hr><hr><hr><hr><h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![哔哩哔哩](http://img.jiege123.art/images/2019/09/25/10.jpg &quot;哔哩哔哩&quot;)</span><br></pre></td></tr></table></figure><p><img src="http://img.jiege123.art/images/2019/09/25/10.jpg" alt="哔哩哔哩" title="哔哩哔哩"></p><p>上传本地图片直接点击导航栏的图片标志，选择图片即可</p><h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[小明网](http://blog.jiege123.art)</span><br><span class="line">[小明图床](http://img.jiege123.art)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://blog.jiege123.art">小明网</a><br><a href="http://img.jiege123.art" target="_blank" rel="noopener">小明图床</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，如果想要在新页面中打开的话可以用html语言的a标签代替或者 <strong>Ctrl+鼠标左键</strong> 打开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;</span><br></pre></td></tr></table></figure><h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><ul><li><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4></li></ul><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4></li></ul><p>语法：<br>数字加点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>1.列表内容<br>2.列表内容<br>3.列表内容</p><ul><li><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4></li></ul><h4 id="上一级和下一级之间敲三个空格即可"><a href="#上一级和下一级之间敲三个空格即可" class="headerlink" title="上一级和下一级之间敲三个空格即可"></a>上一级和下一级之间敲三个空格即可</h4><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级无序列表内容<br>1.二级有序列表内容<br>2.二级有序列表内容<br>3.二级有序列表内容</p></li></ul><p>1.一级有序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul><p>2.一级有序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol><h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><p>效果如下：<br>姓名|技能|排行<br>–|:–:|–:<br>刘备|哭|大哥<br>关羽|打|二哥<br>张飞|骂|三弟</p><h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</span><br></pre></td></tr></table></figure><p>示例：</p><p>单行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`create database hero;`</span><br></pre></td></tr></table></figure><p>代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;我是一个函数&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">​```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">​</span><br></pre></td></tr></table></figure><pre><code>效果如下：![流程图](http://img.jiege123.art/images/2019/10/02/33ab9d27a11da19ce33f802b7d3bfebe.png&quot;流程图&quot;)</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;一、标题&quot;&gt;&lt;a href=&quot;#一、标题&quot; class=&quot;headerlink&quot; title=&quot;一、标题&quot;&gt;&lt;/a&gt;一、标题&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="Markdown" scheme="http://blog.jiege123.art/categories/Markdown/"/>
    
    
      <category term="笔记" scheme="http://blog.jiege123.art/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="分享" scheme="http://blog.jiege123.art/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.jiege123.art/2019/08/28/hello-world/"/>
    <id>http://blog.jiege123.art/2019/08/28/hello-world/</id>
    <published>2019-08-28T13:41:04.515Z</published>
    <updated>2019-10-03T06:25:16.685Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建一个新文章"><a href="#创建一个新文章" class="headerlink" title="创建一个新文章"></a>创建一个新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>注意：<code>hexo g</code>会在本地生成静态文件并且打包成<strong>.deploy_git</strong> 这个文件夹就是以后要部署到远程服务器的文件夹可以看到里面有一个 <strong>.git</strong> 的文件夹，相当于隐式的 <code>git init</code>,不过这一步<code>hexo g</code> 已经帮我们完成了</p><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="安全删除目录"><a href="#安全删除目录" class="headerlink" title="安全删除目录"></a>安全删除目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .git/</span><br></pre></td></tr></table></figure><h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Nov 16 2019 11:48:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hex
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
